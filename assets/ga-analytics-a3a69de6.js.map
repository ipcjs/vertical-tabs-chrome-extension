{"version":3,"file":"ga-analytics-a3a69de6.js","sources":["../../src/helpers/getExtensionVersion.ts","../../src/helpers/getMemoryUsage.ts","../../src/analytics/ga-analytics.ts"],"sourcesContent":["export const getExtensionVersion = () => {\n  const manifest = chrome.runtime.getManifest();\n  return manifest.version;\n};\n","export const getMemoryUsage = () => {\n  return performance?.memory?.usedJSHeapSize;\n}","import { IS_DEV } from \"../Constants\";\nimport { getExtensionVersion } from \"../helpers/getExtensionVersion\";\nimport { getMemoryUsage } from \"../helpers/getMemoryUsage\";\n\nconst GA_ENDPOINT = \"https://www.google-analytics.com/mp/collect\";\nconst GA_DEBUG_ENDPOINT = \"https://www.google-analytics.com/debug/mp/collect\";\n\n// Get via https://developers.google.com/analytics/devguides/collection/protocol/ga4/sending-events?client_type=gtag#recommended_parameters_for_reports\nconst MEASUREMENT_ID = \"G-PWTSXRQH0X\";\nconst API_SECRET = \"DyNrnsxiTyqDSUIi-vz_9w\";\nconst DEFAULT_ENGAGEMENT_TIME_MSEC = 100;\n\n// Duration of inactivity after which a new session is created\nconst SESSION_EXPIRATION_IN_MIN = 30;\n\ntype EventParams = {\n  session_id?: string;\n  engagement_time_msec?: number;\n  page_title?: string;\n  page_location?: string;\n  [key: string]: unknown; // other properties\n};\n\nexport class Analytics {\n  debug: boolean;\n\n  constructor(debug = false) {\n    this.debug = debug;\n  }\n\n  // Returns the client id, or creates a new one if one doesn't exist.\n  // Stores client id in local storage to keep the same client id as long as\n  // the extension is installed.\n  async getOrCreateClientId() {\n    let { clientId } = await chrome.storage.local.get(\"clientId\");\n    if (!clientId) {\n      // Generate a unique client ID, the actual value is not relevant\n      clientId = self.crypto.randomUUID();\n      await chrome.storage.local.set({ clientId });\n    }\n    return clientId;\n  }\n\n  // Returns the current session id, or creates a new one if one doesn't exist or\n  // the previous one has expired.\n  async getOrCreateSessionId() {\n    // Use storage.session because it is only in memory\n    let { sessionData } = await chrome.storage.session.get(\"sessionData\");\n    const currentTimeInMs = Date.now();\n    // Check if session exists and is still valid\n    if (sessionData && sessionData.timestamp) {\n      // Calculate how long ago the session was last updated\n      const durationInMin = (currentTimeInMs - sessionData.timestamp) / 60000;\n      // Check if last update lays past the session expiration threshold\n      if (durationInMin > SESSION_EXPIRATION_IN_MIN) {\n        // Clear old session id to start a new session\n        sessionData = null;\n      } else {\n        // Update timestamp to keep session alive\n        sessionData.timestamp = currentTimeInMs;\n        await chrome.storage.session.set({ sessionData });\n      }\n    }\n    if (!sessionData) {\n      // Create and store a new session\n      sessionData = {\n        session_id: currentTimeInMs.toString(),\n        timestamp: currentTimeInMs.toString(),\n      };\n      await chrome.storage.session.set({ sessionData });\n    }\n    return sessionData.session_id;\n  }\n\n  // Fires an event with optional params. Event names must only include letters and underscores.\n  async fireEvent(name: string, params: EventParams = {}) {\n    // Configure session id and engagement time if not present, for more details see:\n    // https://developers.google.com/analytics/devguides/collection/protocol/ga4/sending-events?client_type=gtag#recommended_parameters_for_reports\n    if (!params.session_id) {\n      params.session_id = await this.getOrCreateSessionId();\n    }\n    if (!params.engagement_time_msec) {\n      params.engagement_time_msec = DEFAULT_ENGAGEMENT_TIME_MSEC;\n    }\n\n    const extension_version = getExtensionVersion();\n\n    if (extension_version) {\n      params.extension_version = extension_version;\n    }\n\n    const heap_size = getMemoryUsage();\n\n    if (extension_version) {\n      params.heap_size = heap_size;\n    }\n\n    if (this.debug) {\n      console.log(\"Event fired:\", name, { ...params, extension_version });\n      return;\n    }\n\n    try {\n      await fetch(\n        `${\n          this.debug ? GA_DEBUG_ENDPOINT : GA_ENDPOINT\n        }?measurement_id=${MEASUREMENT_ID}&api_secret=${API_SECRET}`,\n        {\n          method: \"POST\",\n          body: JSON.stringify({\n            client_id: await this.getOrCreateClientId(),\n            events: [\n              {\n                name,\n                params,\n              },\n            ],\n          }),\n        }\n      );\n    } catch (e) {\n      console.error(\"Google Analytics request failed with an exception\", e);\n    }\n  }\n\n  // Fire a page view event.\n  async firePageViewEvent(pageTitle: string, pageLocation: string) {\n    return this.fireEvent(\"page_view\", {\n      page_title: pageTitle,\n      page_location: pageLocation,\n    });\n  }\n\n  // Fire an error event.\n  async fireErrorEvent(error: { [key: string]: unknown }) {\n    // Note: 'error' is a reserved event name and cannot be used\n    // see https://developers.google.com/analytics/devguides/collection/protocol/ga4/reference?client_type=gtag#reserved_names\n    return this.fireEvent(\"extension_error\", {\n      ...error,\n      message: error.message,\n      stack: error.stack,\n    });\n  }\n}\n\nexport default new Analytics(IS_DEV ? true : false);\n"],"names":["getExtensionVersion","getMemoryUsage","_a","GA_ENDPOINT","GA_DEBUG_ENDPOINT","MEASUREMENT_ID","API_SECRET","DEFAULT_ENGAGEMENT_TIME_MSEC","SESSION_EXPIRATION_IN_MIN","Analytics","debug","__publicField","clientId","sessionData","currentTimeInMs","name","params","extension_version","heap_size","e","pageTitle","pageLocation","error","Analytics$1"],"mappings":"8kBAAO,MAAMA,EAAsB,IAChB,OAAO,QAAQ,YAAY,EAC5B,QCFLC,EAAiB,IAAM,OAClC,OAAOC,EAAA,qCAAa,SAAb,YAAAA,EAAqB,cAC9B,ECEMC,EAAc,8CACdC,EAAoB,oDAGpBC,EAAiB,eACjBC,EAAa,yBACbC,EAA+B,IAG/BC,EAA4B,GAU3B,MAAMC,CAAU,CAGrB,YAAYC,EAAQ,GAAO,CAF3BC,EAAA,cAGE,KAAK,MAAQD,CACf,CAKA,MAAM,qBAAsB,CACtB,GAAA,CAAE,SAAAE,CAAa,EAAA,MAAM,OAAO,QAAQ,MAAM,IAAI,UAAU,EAC5D,OAAKA,IAEQA,EAAA,KAAK,OAAO,aACvB,MAAM,OAAO,QAAQ,MAAM,IAAI,CAAE,SAAAA,EAAU,GAEtCA,CACT,CAIA,MAAM,sBAAuB,CAEvB,GAAA,CAAE,YAAAC,CAAgB,EAAA,MAAM,OAAO,QAAQ,QAAQ,IAAI,aAAa,EAC9D,MAAAC,EAAkB,KAAK,MAEzB,OAAAD,GAAeA,EAAY,aAENC,EAAkBD,EAAY,WAAa,IAE9CL,EAEJK,EAAA,MAGdA,EAAY,UAAYC,EACxB,MAAM,OAAO,QAAQ,QAAQ,IAAI,CAAE,YAAAD,EAAa,IAG/CA,IAEWA,EAAA,CACZ,WAAYC,EAAgB,SAAS,EACrC,UAAWA,EAAgB,SAAS,CAAA,EAEtC,MAAM,OAAO,QAAQ,QAAQ,IAAI,CAAE,YAAAD,EAAa,GAE3CA,EAAY,UACrB,CAGA,MAAM,UAAUE,EAAcC,EAAsB,GAAI,CAGjDA,EAAO,aACHA,EAAA,WAAa,MAAM,KAAK,qBAAqB,GAEjDA,EAAO,uBACVA,EAAO,qBAAuBT,GAGhC,MAAMU,EAAoBjB,IAEtBiB,IACFD,EAAO,kBAAoBC,GAG7B,MAAMC,EAAYjB,IAMlB,GAJIgB,IACFD,EAAO,UAAYE,GAGjB,KAAK,MAAO,CACd,QAAQ,IAAI,eAAgBH,EAAM,CAAE,GAAGC,EAAQ,kBAAAC,EAAmB,EAClE,MACF,CAEI,GAAA,CACI,MAAA,MACJ,GACE,KAAK,MAAQb,EAAoBD,CACnC,mBAAmBE,CAAc,eAAeC,CAAU,GAC1D,CACE,OAAQ,OACR,KAAM,KAAK,UAAU,CACnB,UAAW,MAAM,KAAK,oBAAoB,EAC1C,OAAQ,CACN,CACE,KAAAS,EACA,OAAAC,CACF,CACF,CAAA,CACD,CACH,CAAA,QAEKG,EAAG,CACF,QAAA,MAAM,oDAAqDA,CAAC,CACtE,CACF,CAGA,MAAM,kBAAkBC,EAAmBC,EAAsB,CACxD,OAAA,KAAK,UAAU,YAAa,CACjC,WAAYD,EACZ,cAAeC,CAAA,CAChB,CACH,CAGA,MAAM,eAAeC,EAAmC,CAG/C,OAAA,KAAK,UAAU,kBAAmB,CACvC,GAAGA,EACH,QAASA,EAAM,QACf,MAAOA,EAAM,KAAA,CACd,CACH,CACF,CAEA,MAAAC,EAAe,IAAId,EAA0B,EAAK"}